{
    "docs": [
        {
            "location": "/index.html", 
            "text": "mlrMBO Tutorial\n\n\nmlrMBO\n is a framework for the (sequential) Model Based parameter Optimization.\nThe goal is to optimize numeric or discrete influence parameters\nof a non-linear black box function like an industrial simulator or  a time-consuming algorithm.\n\n\nIn the following we provide an in-depth introduction to \nmlrMBO\n. An introductory example serves as a quickstart guide.\nNote that our focus is on your comprehension of the basic functions and\napplications. For detailed technical information and manual pages, please refer to\nthe package's \nmanual pages\n. They are regularly updated and reflect the documentation of the current packages on CRAN.\n\n\n\n\nQuickstart\n\n\nIn Depth Introduction\n\n\nFurther advanced topics:\n\n\nParallelization\n Make use of multicore CPUs and other distributed computing methods.", 
            "title": "Home"
        }, 
        {
            "location": "/index.html#mlrmbo-tutorial", 
            "text": "mlrMBO  is a framework for the (sequential) Model Based parameter Optimization.\nThe goal is to optimize numeric or discrete influence parameters\nof a non-linear black box function like an industrial simulator or  a time-consuming algorithm.  In the following we provide an in-depth introduction to  mlrMBO . An introductory example serves as a quickstart guide.\nNote that our focus is on your comprehension of the basic functions and\napplications. For detailed technical information and manual pages, please refer to\nthe package's  manual pages . They are regularly updated and reflect the documentation of the current packages on CRAN.   Quickstart  In Depth Introduction  Further advanced topics:  Parallelization  Make use of multicore CPUs and other distributed computing methods.", 
            "title": "mlrMBO Tutorial"
        }, 
        {
            "location": "/quickstart/index.html", 
            "text": "Introductory example\n\n\nInfo:\n this guide gives you an overview of the typical optimization workflow with \nmrMBO\n. For a much more\ndetailed introduction see \nthe next chapter\n.\n\n\nHere we provide a quickstart example for you to make yourself familiar with \nmlrMBO\n. We aim to maximize a one dimensional mixed cosine function using model-based optimization. Instead of writing this function by hand, we make use of the smoof package, which offers a lot of common single objective optimization functions.\n\n\nlibrary(smoof)\nlibrary(mlr)\nlibrary(mlrMBO)\nlibrary(ParamHelpers)\nobj.fun = makeCosineMixtureFunction(1)\nplot(obj.fun)\n\n\n\n\n\n\nWe decide to use kriging as our surrogate model and to do 10 sequential optimization steps. Furthermore we use Expected Improvement (EI) as the infill criterion, i. e., the criterion which determines which point(s) of the objective function should be evaluated in each iterations (keep in mind, that using EI as the infill criterion needs the learner to support standard error estimation). \n\n\nAs a last step we have to generate an initial design on which we evaluate our model in the beginning. We use \nParamHelpers::generateDesign\n to generate 10 points in a latin hypercube design.\n\n\nlearner = makeLearner(\nregr.km\n, predict.type = \nse\n, covtype = \nmatern3_2\n, \n  control = list(trace = FALSE))\ncontrol = makeMBOControl()\ncontrol = setMBOControlTermination(control, iters = 10)\ncontrol = setMBOControlInfill(control, crit = \nei\n)\ndesign = generateDesign(n = 10, par.set = getParamSet(obj.fun))\n\n\n\n\nFinally we start the optimization process and print the result object.\n\n\nresult = mbo(obj.fun, design = design, learner = learner, control = control, \n             show.info = TRUE)\n#\n Computing y column(s) for design. Not provided.\n#\n [mbo] 0: x=0.815 : y = -0.762 : 0.0 secs : initdesign\n#\n [mbo] 0: x=0.534 : y = -0.234 : 0.0 secs : initdesign\n#\n [mbo] 0: x=0.0531 : y = -0.07 : 0.0 secs : initdesign\n#\n [mbo] 0: x=-0.323 : y = -0.14 : 0.0 secs : initdesign\n#\n [mbo] 0: x=0.397 : y = -0.257 : 0.0 secs : initdesign\n#\n [mbo] 0: x=0.608 : y = -0.27 : 0.0 secs : initdesign\n#\n [mbo] 0: x=-0.477 : y = -0.263 : 0.0 secs : initdesign\n#\n [mbo] 0: x=-0.76 : y = -0.658 : 0.0 secs : initdesign\n#\n [mbo] 0: x=-0.15 : y = 0.0484 : 0.0 secs : initdesign\n#\n [mbo] 0: x=-0.853 : y = -0.795 : 0.0 secs : initdesign\n#\n [mbo] 1: x=-0.0945 : y = -0.0175 : 0.0 secs : infill_ei\n#\n [mbo] 2: x=-0.184 : y = 0.063 : 0.0 secs : infill_ei\n#\n [mbo] 3: x=-0.175 : y = 0.0617 : 0.0 secs : infill_ei\n#\n [mbo] 4: x=-0.201 : y = 0.0596 : 0.0 secs : infill_ei\n#\n [mbo] 5: x=-0.19 : y = 0.0627 : 0.0 secs : infill_ei\n#\n [mbo] 6: x=-0.186 : y = 0.063 : 0.0 secs : infill_ei\n#\n [mbo] 7: x=-0.181 : y = 0.0628 : 0.0 secs : infill_ei\n#\n [mbo] 8: x=-0.185 : y = 0.063 : 0.0 secs : infill_ei\n#\n [mbo] 9: x=0.185 : y = 0.063 : 0.0 secs : infill_ei\n#\n [mbo] 10: x=0.164 : y = 0.0573 : 0.0 secs : infill_ei\nprint(result)\n#\n Recommended parameters:\n#\n x=-0.185\n#\n Objective: y = 0.063\n#\n \n#\n Optimization path\n#\n 10 + 10 entries in total, displaying last 10 (or less):\n#\n              x           y dob eol error.message exec.time            ei\n#\n 11 -0.09451403 -0.01753958   1  NA          \nNA\n         0 -1.409904e-02\n#\n 12 -0.18371763  0.06299489   2  NA          \nNA\n         0 -1.027367e-02\n#\n 13 -0.17468457  0.06168251   3  NA          \nNA\n         0 -1.182718e-03\n#\n 14 -0.20087432  0.05964008   4  NA          \nNA\n         0 -7.438807e-04\n#\n 15 -0.18951993  0.06273026   5  NA          \nNA\n         0 -3.341686e-04\n#\n 16 -0.18598178  0.06299621   6  NA          \nNA\n         0 -8.658221e-05\n#\n 17 -0.18101246  0.06281954   7  NA          \nNA\n         0 -4.220135e-05\n#\n 18 -0.18486936  0.06301220   8  NA          \nNA\n         0 -2.866073e-05\n#\n 19  0.18491046  0.06301218   9  NA          \nNA\n         0 -1.066806e-05\n#\n 20  0.16351890  0.05728703  10  NA          \nNA\n         0 -3.113826e-03\n#\n    error.model train.time prop.type propose.time\n#\n 11        \nNA\n      0.076 infill_ei        0.652\n#\n 12        \nNA\n      0.022 infill_ei        0.390\n#\n 13        \nNA\n      0.021 infill_ei        0.403\n#\n 14        \nNA\n      0.021 infill_ei        0.521\n#\n 15        \nNA\n      0.024 infill_ei        0.437\n#\n 16        \nNA\n      0.140 infill_ei        0.528\n#\n 17        \nNA\n      0.023 infill_ei        0.539\n#\n 18        \nNA\n      0.021 infill_ei        0.554\n#\n 19        \nNA\n      0.032 infill_ei        0.460\n#\n 20        \nNA\n      0.036 infill_ei        0.576\n\n\n\n\nExample run\n\n\nThere is also the function \nexampleRun\n, which is useful to figure out how \nmbo\n works and to visualize the results.\n\n\nex = exampleRun(obj.fun, learner = learner, control = control, show.info = FALSE)\n\n\n\n\nprint(ex)\n#\n MBOExampleRun\n#\n Number of parameters        : 1\n#\n Parameter names             : x\n#\n Parameter types             : numericvector\n#\n Global Opt (known)          : -1.0000e-01\n#\n Gap for best point          : 1.6301e-01\n#\n True points per dim.        : 50\n#\n Objectives                    : 1\n#\n Points proposed per iter      : 1\n#\n \n#\n Infill criterion              : ei\n#\n Infill optimizer              : focussearch\n#\n Infill optimizer restarts     : 1\n#\n Final point by                : best.true.y\n#\n Learner                     : regr.km\n#\n Learner settings:\n#\n jitter=FALSE,covtype=matern3_2,control=\nlist\n\n#\n Recommended parameters:\n#\n x=0.185\n#\n Objective: y = 6.301e-02\nplotExampleRun(ex, iters = c(1L, 3L, 10L))\n\n\n\n\n\n\nOr alternatively for a two dimensional function:\n\n\nobj.fun2 = makeCosineMixtureFunction(2L)\nplot(obj.fun2)\n\n\n\n\n\n\nex2 = exampleRun(obj.fun2, learner = learner, control = control, show.info = FALSE)\n\n\n\n\nprint(ex2)\n#\n MBOExampleRun\n#\n Number of parameters        : 2\n#\n Parameter names             : x1,x2\n#\n Parameter types             : numericvector\n#\n Global Opt (known)          : -2.0000e-01\n#\n Gap for best point          : 3.2601e-01\n#\n True points per dim.        : 50\n#\n Objectives                    : 1\n#\n Points proposed per iter      : 1\n#\n \n#\n Infill criterion              : ei\n#\n Infill optimizer              : focussearch\n#\n Infill optimizer restarts     : 1\n#\n Final point by                : best.true.y\n#\n Learner                     : regr.km\n#\n Learner settings:\n#\n jitter=FALSE,covtype=matern3_2,control=\nlist\n\n#\n Recommended parameters:\n#\n x=0.186,-0.184\n#\n Objective: y = 1.260e-01\nplotExampleRun(ex2, iters = c(1L, 3L, 10L))", 
            "title": "Quickstart"
        }, 
        {
            "location": "/quickstart/index.html#introductory-example", 
            "text": "Info:  this guide gives you an overview of the typical optimization workflow with  mrMBO . For a much more\ndetailed introduction see  the next chapter .  Here we provide a quickstart example for you to make yourself familiar with  mlrMBO . We aim to maximize a one dimensional mixed cosine function using model-based optimization. Instead of writing this function by hand, we make use of the smoof package, which offers a lot of common single objective optimization functions.  library(smoof)\nlibrary(mlr)\nlibrary(mlrMBO)\nlibrary(ParamHelpers)\nobj.fun = makeCosineMixtureFunction(1)\nplot(obj.fun)   We decide to use kriging as our surrogate model and to do 10 sequential optimization steps. Furthermore we use Expected Improvement (EI) as the infill criterion, i. e., the criterion which determines which point(s) of the objective function should be evaluated in each iterations (keep in mind, that using EI as the infill criterion needs the learner to support standard error estimation).   As a last step we have to generate an initial design on which we evaluate our model in the beginning. We use  ParamHelpers::generateDesign  to generate 10 points in a latin hypercube design.  learner = makeLearner( regr.km , predict.type =  se , covtype =  matern3_2 , \n  control = list(trace = FALSE))\ncontrol = makeMBOControl()\ncontrol = setMBOControlTermination(control, iters = 10)\ncontrol = setMBOControlInfill(control, crit =  ei )\ndesign = generateDesign(n = 10, par.set = getParamSet(obj.fun))  Finally we start the optimization process and print the result object.  result = mbo(obj.fun, design = design, learner = learner, control = control, \n             show.info = TRUE)\n#  Computing y column(s) for design. Not provided.\n#  [mbo] 0: x=0.815 : y = -0.762 : 0.0 secs : initdesign\n#  [mbo] 0: x=0.534 : y = -0.234 : 0.0 secs : initdesign\n#  [mbo] 0: x=0.0531 : y = -0.07 : 0.0 secs : initdesign\n#  [mbo] 0: x=-0.323 : y = -0.14 : 0.0 secs : initdesign\n#  [mbo] 0: x=0.397 : y = -0.257 : 0.0 secs : initdesign\n#  [mbo] 0: x=0.608 : y = -0.27 : 0.0 secs : initdesign\n#  [mbo] 0: x=-0.477 : y = -0.263 : 0.0 secs : initdesign\n#  [mbo] 0: x=-0.76 : y = -0.658 : 0.0 secs : initdesign\n#  [mbo] 0: x=-0.15 : y = 0.0484 : 0.0 secs : initdesign\n#  [mbo] 0: x=-0.853 : y = -0.795 : 0.0 secs : initdesign\n#  [mbo] 1: x=-0.0945 : y = -0.0175 : 0.0 secs : infill_ei\n#  [mbo] 2: x=-0.184 : y = 0.063 : 0.0 secs : infill_ei\n#  [mbo] 3: x=-0.175 : y = 0.0617 : 0.0 secs : infill_ei\n#  [mbo] 4: x=-0.201 : y = 0.0596 : 0.0 secs : infill_ei\n#  [mbo] 5: x=-0.19 : y = 0.0627 : 0.0 secs : infill_ei\n#  [mbo] 6: x=-0.186 : y = 0.063 : 0.0 secs : infill_ei\n#  [mbo] 7: x=-0.181 : y = 0.0628 : 0.0 secs : infill_ei\n#  [mbo] 8: x=-0.185 : y = 0.063 : 0.0 secs : infill_ei\n#  [mbo] 9: x=0.185 : y = 0.063 : 0.0 secs : infill_ei\n#  [mbo] 10: x=0.164 : y = 0.0573 : 0.0 secs : infill_ei\nprint(result)\n#  Recommended parameters:\n#  x=-0.185\n#  Objective: y = 0.063\n#  \n#  Optimization path\n#  10 + 10 entries in total, displaying last 10 (or less):\n#               x           y dob eol error.message exec.time            ei\n#  11 -0.09451403 -0.01753958   1  NA           NA          0 -1.409904e-02\n#  12 -0.18371763  0.06299489   2  NA           NA          0 -1.027367e-02\n#  13 -0.17468457  0.06168251   3  NA           NA          0 -1.182718e-03\n#  14 -0.20087432  0.05964008   4  NA           NA          0 -7.438807e-04\n#  15 -0.18951993  0.06273026   5  NA           NA          0 -3.341686e-04\n#  16 -0.18598178  0.06299621   6  NA           NA          0 -8.658221e-05\n#  17 -0.18101246  0.06281954   7  NA           NA          0 -4.220135e-05\n#  18 -0.18486936  0.06301220   8  NA           NA          0 -2.866073e-05\n#  19  0.18491046  0.06301218   9  NA           NA          0 -1.066806e-05\n#  20  0.16351890  0.05728703  10  NA           NA          0 -3.113826e-03\n#     error.model train.time prop.type propose.time\n#  11         NA       0.076 infill_ei        0.652\n#  12         NA       0.022 infill_ei        0.390\n#  13         NA       0.021 infill_ei        0.403\n#  14         NA       0.021 infill_ei        0.521\n#  15         NA       0.024 infill_ei        0.437\n#  16         NA       0.140 infill_ei        0.528\n#  17         NA       0.023 infill_ei        0.539\n#  18         NA       0.021 infill_ei        0.554\n#  19         NA       0.032 infill_ei        0.460\n#  20         NA       0.036 infill_ei        0.576", 
            "title": "Introductory example"
        }, 
        {
            "location": "/quickstart/index.html#example-run", 
            "text": "There is also the function  exampleRun , which is useful to figure out how  mbo  works and to visualize the results.  ex = exampleRun(obj.fun, learner = learner, control = control, show.info = FALSE)  print(ex)\n#  MBOExampleRun\n#  Number of parameters        : 1\n#  Parameter names             : x\n#  Parameter types             : numericvector\n#  Global Opt (known)          : -1.0000e-01\n#  Gap for best point          : 1.6301e-01\n#  True points per dim.        : 50\n#  Objectives                    : 1\n#  Points proposed per iter      : 1\n#  \n#  Infill criterion              : ei\n#  Infill optimizer              : focussearch\n#  Infill optimizer restarts     : 1\n#  Final point by                : best.true.y\n#  Learner                     : regr.km\n#  Learner settings:\n#  jitter=FALSE,covtype=matern3_2,control= list \n#  Recommended parameters:\n#  x=0.185\n#  Objective: y = 6.301e-02\nplotExampleRun(ex, iters = c(1L, 3L, 10L))   Or alternatively for a two dimensional function:  obj.fun2 = makeCosineMixtureFunction(2L)\nplot(obj.fun2)   ex2 = exampleRun(obj.fun2, learner = learner, control = control, show.info = FALSE)  print(ex2)\n#  MBOExampleRun\n#  Number of parameters        : 2\n#  Parameter names             : x1,x2\n#  Parameter types             : numericvector\n#  Global Opt (known)          : -2.0000e-01\n#  Gap for best point          : 3.2601e-01\n#  True points per dim.        : 50\n#  Objectives                    : 1\n#  Points proposed per iter      : 1\n#  \n#  Infill criterion              : ei\n#  Infill optimizer              : focussearch\n#  Infill optimizer restarts     : 1\n#  Final point by                : best.true.y\n#  Learner                     : regr.km\n#  Learner settings:\n#  jitter=FALSE,covtype=matern3_2,control= list \n#  Recommended parameters:\n#  x=0.186,-0.184\n#  Objective: y = 1.260e-01\nplotExampleRun(ex2, iters = c(1L, 3L, 10L))", 
            "title": "Example run"
        }, 
        {
            "location": "/in_depth_introduction/index.html", 
            "text": "Introduction\n\n\nThe first step of MBO requires an initial set of points which are then evaluated by the black box function.\n\n\nThe procedure of MBO is a loop of the following steps:\n\n\n\n\nA user defined surrogate model is fitted on the evaluated points\n\n\nA new point is proposed by an infill criterion \n\n\nIts performance is evaluated\n\n\n\n\nWe will use \nmlrMBO\n to maximize a one dimensional mixed cosine function function, which you may already know from the \nquickstart\n example.\n\n\nlibrary(mlrMBO)\n\nobj.fun = makeCosineMixtureFunction(1)\n\ndes = generateDesign(n = 5L, par.set = getParamSet(obj.fun))\n\nlearner = makeLearner(\nregr.km\n, predict.type = \nse\n, covtype = \nmatern3_2\n, control = list(trace = FALSE))\n\ncontrol = makeMBOControl()\ncontrol = setMBOControlTermination(control, iters = 5)\ncontrol = setMBOControlInfill(control, crit = \nei\n)\n\nresult = mbo(obj.fun, learner = learner, control = control, show.info = TRUE)\n#\n Computing y column(s) for design. Not provided.\n#\n [mbo] 0: x=0.991 : y = -0.882 : 0.0 secs : initdesign\n#\n [mbo] 0: x=-0.318 : y = -0.128 : 0.0 secs : initdesign\n#\n [mbo] 0: x=0.0279 : y = -0.0913 : 0.0 secs : initdesign\n#\n [mbo] 0: x=-0.567 : y = -0.235 : 0.0 secs : initdesign\n#\n [mbo] 1: x=-0.106 : y = -0.00128 : 0.0 secs : infill_ei\n#\n [mbo] 2: x=-1 : y = -0.9 : 0.0 secs : infill_ei\n#\n [mbo] 3: x=-0.157 : y = 0.0537 : 0.0 secs : infill_ei\n#\n [mbo] 4: x=-0.19 : y = 0.0627 : 0.0 secs : infill_ei\n#\n [mbo] 5: x=0.329 : y = -0.151 : 0.0 secs : infill_ei\n\n\n\n\nFrom this example we can easily see some \nmlrMBO\n essentials, like parameters, learners and the control object.\n\n\nThe following steps are needed to start a surrogate-based optimization with our package. \nEach step ends with an R object, which is then passed to \nmbo()\n, i.e., to the working horse of \nmlrMBO\n.\n\n\n\n\ndefine the objective function and its parameters by using the package \nsmoof\n\n(2. generate an initial design)\n(3. define a learner, i.e., the surrogate model)\n\n\nset up a MBO control object\n\n\nfinally start the optimization\n\n\n\n\nStep 2 and 3 are optional as \nmbo()\n will use default settings if no value is supplied.\nThis web page will provide you with an in-depth introduction on how to set the \nmbo()\n parameters for different kind of optimizations.\n\n\nObjective Function\n\n\nThe first argument of \nmbo()\n is the the objective function created with \nmakeSingleObjectiveFunction\n (or \nmakeMultiObjectiveFunction\n) from the package \nsmoof\n. \n\n\nThroughout this tutorial we demonstrate the optimization of two simple functions: \n\n\n\n\n\n\nobjfun1\n: The 5 dimensional \nackley function\n, which depends on 5 numeric parameters. \nobjfun1\n should be minimized.\n\n\n\n\n\n\nobjfun2\n: A self-constructed sine und cosine combination, with two numeric and 1 categorical parameters. \nobjfun2\n should be maximized. \n\n\n\n\n\n\nThe 5 dimensional \nackley function\n is generated by the appropriate function of the \nsmoof\n package.\n\n\nobjfun1 = makeAckleyFunction(5)\nobjfun1(c(1.8, 2.2, -4, 4, -5))\n#\n [1] 10.9365\n\n\n\n\nThe self-constructed function can be built with \nmakeSingleObjetiveFunction\n. The \npar.set\n argument has to be a \nParamSet\n object from the \nParamHelpers\n package, which provides information about the parameters of the objective function and their constraints for optimization.\nWe define \nj\n in the interval [0,1] and \nk\n as an integer in {1, 2}. The Parameter \nmethod\n is categorical and can be either \n\"a\"\n or \n\"b\"\n.\nIn this case we want to maximize the function, so we have to set \nminimize = FALSE\n.\nAs the parameters are different types (e.g. numeric and categorical), the function expects a list instead of a vector as its argument \n(This is specified by \nhas.simple.signature = FALSE\n).\nFor further information about he \nsmoof\n package we refer to the \ngithub page\n.\n\n\nfoo = function(x) {\n  j = x[[1]]\n  k = x[[2]]\n  method = x[[3]]\n  perf = ifelse(method == \na\n, k * sin(j) + cos(j),\n               sin(j) + k * cos(j))\n  return(perf)\n}\n\nobjfun2 = makeSingleObjectiveFunction(\n  name = \nexample\n,\n  fn = foo,\n  par.set = makeParamSet(\n    makeNumericParam(\nj\n, lower = 0,upper = 1),\n    makeIntegerParam(\nk\n, lower = 1L, upper = 2L),\n    makeDiscreteParam(\nmethod\n, values = c(\na\n, \nb\n))\n  ),\n  has.simple.signature = FALSE,\n  minimize = FALSE\n)\n\nobjfun2(list(j = 0.5, k = 1L, method = \na\n))\n#\n [1] 1.357008\n\n\n\n\nInitial Design\n\n\nThe second argument of the \nmbo()\n function - \ndesign\n - is the initial design with default setting \nNULL\n.\n\n\nAn easy (and recommended) way to create an initial design is to use the \ngenerateDesign\n function from the \nParamHelpers\n package. If the default settings are used (i.e. \ndesign = NULL\n) a Random Latin Hypercube \nlhs::randomLHS\n design is used with 4 times the number of objective function's parameters. Other possibilities to generate designs are for example \ngenerateGridDesign\n and \ngenerateRandomDesign\n. \n\n\nNote:\n If special designs are desired (e.g., orthogonal designs), its interface has to be the same as the interface of the \ngenerateDesign\n objects. \n\n\nFor \nobjfun1\n and \nobjfun2\n we create a slightly larger number of initial points than the default suggests. For \nobjfun1\n we use Random Latin Hypercube sampling and for \nobjfun2\n the Maximin Latin Hypercube sampling. The parameters of the sampling design have to be specified in a list and supplied via \nfun.args\n.\n\n\ninit.points1 = 5 * sum(ParamHelpers::getParamLengths(getParamSet(objfun1)))\n\nset.seed(1)\ndesign1 = generateDesign(n = init.points1, par.set = getParamSet(objfun1), fun = randomLHS)\n\ninit.points2 = 5 * sum(ParamHelpers::getParamLengths(getParamSet(objfun2)))\ndesign2 = generateDesign(n = init.points2, par.set = getParamSet(objfun2), fun.args = list(k = 3, dup = 4), fun = maximinLHS)\n\n\n\n\nSurrogate Model\n\n\nThe attribute \nlearner\n of the \nmbo()\n function allows us to choose an appropriate surrogate model for the parameter optimization. Different learners can easily created using the \nmakeLearner\n function from the \nmlr\n package.\nA list of implemented learners can be seen using the \nlistlearners()\n function or on the \nmlr wiki\n.\n\n\nThe choice of the surrogate model depends on the parameter set of the objective function.\nWhile kriging models (gaussian processes) are advisable if all parameters are numeric, they cannot be used if the objective function contains categorical parameters. If at least one parameter is categorical, random forest models might be a good choice as surrogate models. The default kriging model is from the \nDiceKriging\n package and uses the \nmatern5_2\ncovariance kernel.\nIn our example we consider these two surrogate models:\n\nkriging\n for optimizing of \nobjfun1\n and \nrandom forest\n for \nobjfun2\n.\n\n\nsurr.km = makeLearner(\nregr.km\n, predict.type = \nse\n, covtype = \nmatern3_2\n, control = list(trace = FALSE))\nsurr.rf = makeLearner(\nregr.randomForest\n)\n\n\n\n\nFurther modification of the learner (e.g., in order to get standard error prediction for points) will be discussed und illustrated in the section \nExperiments and Output\n.\n\n\nMBOControl\n\n\nThe \nMBOControl\n object controls the fitting process and is created with \nmakeMBOControl\n. General control arguments can be set when creating it (e.g. the number of objectives (\nn.objectives\n), the number of points to propose in each iteration (\npropose.points\n), how the final point is proposed (\nfinal.method\n) etc.).\nTo further adapt the optimization, additional control functions are used to define or change settings of the object:  \n\n\nMBOControlInfill\n\n\nWith \nsetMBOControlInfill\n a \nMBOControl\n object can be extended with infill criteria and infill optimizer options.\n\n\nArgument \ncrit\n\n\nOne of the most important questions is to define how the next design points in the sequential loop are chosen. \n5 different possibilities can be set via the \ncrit\n argument in \nsetMBOControlInfill\n:\n\n\n\n\nmean\n: mean response of the surrogate model\n\n\nei\n: expected improvement of the surrogate model\n\n\naei\n: augmented expected improvement, which is especially useful for noisy functions\n\n\neqi\n: expected quantile improvement\n\n\ncb\n: confidence bound, which is the additive combination of mean response and mean standard error estimation of the surrogate model (response - lambda * standard.error)\n\n\n\n\nThe parameters of the different criteria are set via further arguments (e.g. \ncrit.cb.lambds\n for the lambda parameter if \ncrit = cb\n) \n\n\nArgument \nopt\n\n\nThe argument \nopt\n sets how the next point to evaluate should be proposed given an infill criterion. \nThe possibilities are:\n\n\n\n\nfocussearch\n: A Latin Hypercube design of size \nopt.focussearch.points\n (default 10000) is sampled in the parameter space (by \nrandomLHS\n) and the design point with the best prediction of the infill criterion is determined. Then, the parameter space is shrunk around the best design point. This process is repeated \nopt.focussearch.maxit\n (default 5) times and the best observed point is passed back.\n\n\ncmaes\n: The optimal point is found with a covariance matrix adapting evolutionary strategy from the \ncmaes\n package. If the strategy fails, a random point is generated and a warning is given. Further control arguments can be provided in \nopt.cmaes.control\n as a list. \n\n\nea\n: Use an evolutionary multiobjective optimization algorithm from the package \nemoa\n to determine the best point. The population size mu can be set by  \nopt.ea.mu\n (default value is 10). (mu+1) means that in each population only one child is generated using crossover und mutation operators. The parameters \neta\n and \np\n of the latter two operators can be adjusted via the attributes \nopt.ea.sbx.eta\n, \nopt.ea.sbx.p\n,\nopt.ea.pm.eta\n and \nopt.ea.pm.p\n. The default number of EA iterations is 500 and can be changed by \nopt.ea.maxit\n attribute.\n\n\nnsga2\n: Use the non-dominated sorting genetic algorithm from the package \nnsga2R\n to determine the best point. This algorithm should be used for \nmulti object optimization\n.\n\n\n\n\nAs all four infill optimization strategies do not guarantee to find the global optimum, users can set the number of restarts by the \nopt.restarts\n argument (default value is 1).\nAfter conducting the desired number of restarts the point with the best infill criterion value is passed back to the MBO loop.\n\n\nNote:\n Only the \nfocussearch\n optimizer is suitable for for categorical parameters in the parameter set.\n\n\nsetMBOControlTermination\n\n\nWith this control function different criteria to stop the fitting process can be specified. You can set multiple different criteria and the first one that is met will terminate the optimization process.\nYou can set: \n\n\n\n\niters\n: The maximum number of iterations\n\n\ntime.budget\n: A maximum running time in seconds\n\n\ntarget.fun.value\n: A treshold for function evaluation (stop if a evaluation is better than a given value)\n\n\nmax.evals\n: The maximum number of function evaluations\n\n\n\n\nNote:\n You can also easily create your own stopping condition(s).\n\n\nsetMBOControlMultiPoint\n\n\nThis extends a MBO control object with options for multipoint proposal. Multipoint proposal means, that multiple points are proposed and evaluated, which is especially useful for parallel batch evaluation. For a detailed introduction, check the \nmulti-point tutorial\n.\n\n\nArgument: \nmethod\n\n\nDefine the method used for multipoint proposals, currently 3 different methods are supported:\n\n\n\n\ncb\n: Proposes multiple points by optimizing the confidence bound criterion \npropose.points\n times with different lambda values. Generally this works the same way as for the single point case, i.e. specify \ninfill.opt\n. The lambdas are drawn from an exp(1)-distribution.\n\n\nmulticrit\n: Use a evolutionary multicriteria optimization. This is a (mu+1) type evolutionary algorithm and runs for \nmulticrit.maxit\n generations. The population size is set to \npropose.points\n.\n\n\ncl\n: Proposes points by the constant liar strategy, which only makes sense if the confidence bound criterion is used as an infill criterion. In the first step the surrugate model is fitted based on the real data and the best point is calculated accordingly. Then, the function value of the best point is simply guessed by the worst seen function evaluation. This \"lie\"\" is used to update the model in order to propose subsequent point. The procedure is applied until the number of points has reached \npropose.points\n.\n\n\n\n\nsetMBOControlMultiFid\n\n\nAdd multi-fidelity options to the \nMBOControl\n control object. This is useful when certain parameters increase the performance as well as the calculation cost. The idea is to combine the optimization of fast fitting low-fidelity models and more accurate but expensive high-fidelity models. The parameter on which the fidelity depends on is specified as \nparam\n and the order of the values to train the learner with in \nlvls\n. The costs for the different levels can be specified directly or estimated by a model based on the execution time of the currently evaluated points.  \n\n\nsetMBOControlMultiCrit\n\n\nThis adds multi-criteria optimization specific options to the control object. For details see the tutorial page on \nmulti-criteria optimization\n.\n\n\nnote:\n The list of all attributes is provided in the software documentation.\n\n\nExperiments and Output\n\n\nNow we will apply the mbo() function to optimize the two objective functions.\n\n\ncontrol1 = makeMBOControl()\ncontrol1 = setMBOControlInfill(\n  control = control1,\n  crit = \nei\n,\n  opt = \ncmaes\n\n)\ncontrol1 = setMBOControlTermination(\n  control = control1,\n  iters = 10\n)\n\ncontrol2 = makeMBOControl()\ncontrol2 = setMBOControlInfill(\n  control = control2,\n  crit = \nmean\n,\n  opt = \nfocussearch\n\n)\ncontrol2 = setMBOControlTermination(\n  control = control2,\n  iters = 10\n)\n\n\n\n\nOptimization of objfun1\n\n\nmbo(objfun1, design = design1, learner = surr.km, control = control1, show.info = FALSE)\n#\n Loading required package: cmaes\n#\n Recommended parameters:\n#\n x=-0.231,-7.24,2.99,9.75,0.772\n#\n Objective: y = 14.890\n#\n \n#\n Optimization path\n#\n 25 + 10 entries in total, displaying last 10 (or less):\n#\n            x1         x2         x3        x4          x5        y dob eol\n#\n 26 -4.1344701 -11.280723 -6.2682848 10.614163  1.51687717 17.69731   1  NA\n#\n 27 -4.2113035 -12.460723  5.4296361 26.550440  2.26434473 20.79083   2  NA\n#\n 28 -2.8101134 -11.905387 -6.2708025 11.198311  1.48710794 17.56453   3  NA\n#\n 29 -2.3077237 -11.283067 -0.7137972 10.068634  0.67382086 16.70700   4  NA\n#\n 30 -1.6128847 -11.157700  0.4245640  9.321973 -1.46651174 16.74696   5  NA\n#\n 31 -1.9767048  -7.994966  0.5428918  9.879410  1.29925113 15.09592   6  NA\n#\n 32 -2.1739016  -7.507374  3.5950233 10.343125  7.13426623 16.81716   7  NA\n#\n 33  1.0177723  -7.320137  3.8522845  9.734331 -0.09586551 14.90152   8  NA\n#\n 34 -0.2307275  -7.238255  2.9901658  9.752429  0.77217362 14.89039   9  NA\n#\n 35  0.8305870  -7.828567  0.9769239 10.212582  0.66503963 15.03985  10  NA\n#\n    error.message exec.time          ei error.model train.time prop.type\n#\n 26          \nNA\n         0 -0.13578587        \nNA\n      0.056 infill_ei\n#\n 27          \nNA\n         0 -0.04112985        \nNA\n      0.068 infill_ei\n#\n 28          \nNA\n         0 -0.04329315        \nNA\n      0.023 infill_ei\n#\n 29          \nNA\n         0 -0.04881911        \nNA\n      0.073 infill_ei\n#\n 30          \nNA\n         0 -0.07473238        \nNA\n      0.068 infill_ei\n#\n 31          \nNA\n         0 -0.04701723        \nNA\n      0.088 infill_ei\n#\n 32          \nNA\n         0 -0.07258889        \nNA\n      0.099 infill_ei\n#\n 33          \nNA\n         0 -0.11976001        \nNA\n      0.101 infill_ei\n#\n 34          \nNA\n         0 -0.13456980        \nNA\n      0.096 infill_ei\n#\n 35          \nNA\n         0 -0.09734031        \nNA\n      0.081 infill_ei\n#\n    propose.time\n#\n 26       39.615\n#\n 27        4.059\n#\n 28        4.247\n#\n 29       16.450\n#\n 30       39.955\n#\n 31       39.590\n#\n 32       15.670\n#\n 33       18.812\n#\n 34       39.722\n#\n 35       39.759\n\n\n\n\nThe default output of mbo contains the best found parameter set and the optimzation path. The \nMBOResult\n object contains additional information, most importantly:\n\n\n\n\nx\n: The best point of the parameter space\n\n\ny\n: The associated best value of the objective function\n\n\nopt.path\n: The optimization path. See \nParamHelpers::OptPath\n for further information.\n\n\nmodels\n: Depending on \nstore.model.at\n in the \nMBOControl\n object, this contains zero, one or multiple surrogate models (default is to save the model generated after the last iteration).\n\n\n...\n\n\n\n\nWe can also change some arguments of the \nMBOControl\n object and run \nmbo()\n again:\n\n\ncontrol1 = setMBOControlInfill(control1, crit = \ncb\n)\ncontrol1 = setMBOControlTermination(control1, iters = 5L)\nmbo(objfun1, design = design1, learner = surr.km, control = control1, show.info = FALSE)\n#\n Recommended parameters:\n#\n x=0.978,-7.43,-13.1,10.7,-1.56\n#\n Objective: y = 18.028\n#\n \n#\n Optimization path\n#\n 25 + 5 entries in total, displaying last 10 (or less):\n#\n             x1         x2         x3         x4          x5        y dob\n#\n 21 -18.4744127  21.313393  13.344632  28.213180  30.6994892 21.86065   0\n#\n 22 -24.4445957  -1.728539  22.571544 -29.712832 -10.6725366 21.80285   0\n#\n 23  21.6182247   8.797898 -27.943221  15.262464  -6.2057612 21.00895   0\n#\n 24 -16.7641412  -8.149115  17.872883 -31.430737  20.8669152 21.12661   0\n#\n 25  14.0628327 -23.906238  -4.501402 -19.860112 -22.4317746 21.10929   0\n#\n 26  -4.1044128 -12.606910  -5.703835  22.811550  -3.1341140 19.79305   1\n#\n 27  -4.3377912  -8.183227 -18.206775  -1.593834  17.8480240 19.97844   2\n#\n 28  -3.5921373 -17.464623  14.515179   2.615829 -21.7642485 21.05124   3\n#\n 29   0.9780682  -7.428006 -13.146121  10.701360  -1.5647973 18.02784   4\n#\n 30  17.7388794  -7.605400 -12.511124  10.833863   0.6870558 19.95576   5\n#\n    eol error.message exec.time       cb error.model train.time  prop.type\n#\n 21  NA          \nNA\n         0       NA        \nNA\n         NA initdesign\n#\n 22  NA          \nNA\n         0       NA        \nNA\n         NA initdesign\n#\n 23  NA          \nNA\n         0       NA        \nNA\n         NA initdesign\n#\n 24  NA          \nNA\n         0       NA        \nNA\n         NA initdesign\n#\n 25  NA          \nNA\n         0       NA        \nNA\n         NA initdesign\n#\n 26  NA          \nNA\n         0 19.57520        \nNA\n      0.104  infill_cb\n#\n 27  NA          \nNA\n         0 19.61595        \nNA\n      0.057  infill_cb\n#\n 28  NA          \nNA\n         0 19.58862        \nNA\n      0.053  infill_cb\n#\n 29  NA          \nNA\n         0 19.24408        \nNA\n      0.071  infill_cb\n#\n 30  NA          \nNA\n         0 17.91716        \nNA\n      0.066  infill_cb\n#\n    propose.time\n#\n 21           NA\n#\n 22           NA\n#\n 23           NA\n#\n 24           NA\n#\n 25           NA\n#\n 26       31.465\n#\n 27       29.303\n#\n 28       31.086\n#\n 29       29.351\n#\n 30       30.451\n\n\n\n\nOptimization of objfun2\n\n\nNow let us use \nmlrMBO\n to optimize \nobjfun2\n, which contains one categorical variable.\nAs we have already mentioned before, in case of factor variables only \nfocussearch\n is suitable and kriging cannot be used as a surrogate model.\nIf we use \nmean\n as the infill criterion, any kind of model which can handle factors variables is possible (like regression trees, random forests, linear models and many others).\n\n\nmbo2 = mbo(objfun2, design = design2, learner = surr.rf, control = control2, show.info = FALSE)\n\n\n\n\nmbo2\n#\n Recommended parameters:\n#\n j=0.464; k=2; method=b\n#\n Objective: y = 2.236\n#\n \n#\n Optimization path\n#\n 15 + 10 entries in total, displaying last 10 (or less):\n#\n            j k method        y dob eol error.message exec.time      mean\n#\n 16 0.4818527 2      b 2.235697   1  NA          \nNA\n         0 -2.024302\n#\n 17 0.4776386 2      b 2.235849   2  NA          \nNA\n         0 -2.077485\n#\n 18 0.4732615 2      b 2.235965   3  NA          \nNA\n         0 -2.103271\n#\n 19 0.4583627 2      b 2.236037   4  NA          \nNA\n         0 -2.148599\n#\n 20 0.4635522 2      b 2.236068   5  NA          \nNA\n         0 -2.140973\n#\n 21 0.4695794 2      b 2.236029   6  NA          \nNA\n         0 -2.169294\n#\n 22 0.4528926 2      b 2.235939   7  NA          \nNA\n         0 -2.167340\n#\n 23 0.4593087 2      b 2.236047   8  NA          \nNA\n         0 -2.174345\n#\n 24 0.4606476 2      b 2.236058   9  NA          \nNA\n         0 -2.178551\n#\n 25 0.4559890 2      b 2.236002  10  NA          \nNA\n         0 -2.178266\n#\n    error.model train.time   prop.type propose.time\n#\n 16        \nNA\n      0.012 infill_mean        0.655\n#\n 17        \nNA\n      0.007 infill_mean        0.651\n#\n 18        \nNA\n      0.007 infill_mean        0.656\n#\n 19        \nNA\n      0.007 infill_mean        0.560\n#\n 20        \nNA\n      0.007 infill_mean        0.686\n#\n 21        \nNA\n      0.010 infill_mean        0.587\n#\n 22        \nNA\n      0.007 infill_mean        0.711\n#\n 23        \nNA\n      0.007 infill_mean        0.674\n#\n 24        \nNA\n      0.008 infill_mean        0.590\n#\n 25        \nNA\n      0.007 infill_mean        0.711\n\n\n\n\nIf we want to use the expected improvement \nei\n or (lower) confidence bound \ncb\n, the \npredict.type\n attribute of the learner has be set to \nse\n. A list of regression learners which support it can be viewed by:\n\n\nlistLearners(obj = \nregr\n, properties = \nse\n)\n\n\n\n\nWe modify the random forest to predict the standard error and optimize \nobjfun2\n by the \nei\n infill criterion.\n\n\nlearner_rf = makeLearner(\nregr.randomForest\n, predict.type = \nse\n)\ncontrol2$infill.crit = \nei\n\nmbo(objfun2, design = design2, learner = learner_rf, control = control2, show.info = FALSE)\n#\n Recommended parameters:\n#\n j=0.466; k=2; method=b\n#\n Objective: y = 2.236\n#\n \n#\n Optimization path\n#\n 15 + 10 entries in total, displaying last 10 (or less):\n#\n            j k method        y dob eol error.message exec.time\n#\n 16 0.4661886 2      b 2.236061   1  NA          \nNA\n         0\n#\n 17 0.4489786 2      b 2.235827   2  NA          \nNA\n         0\n#\n 18 0.4087637 2      b 2.232701   3  NA          \nNA\n         0\n#\n 19 0.4001213 2      b 2.231558   4  NA          \nNA\n         0\n#\n 20 0.3891106 2      b 2.229859   5  NA          \nNA\n         0\n#\n 21 0.3991105 2      b 2.231413   6  NA          \nNA\n         0\n#\n 22 0.3811265 2      b 2.228459   7  NA          \nNA\n         0\n#\n 23 0.3890530 2      b 2.229850   8  NA          \nNA\n         0\n#\n 24 0.3479477 2      b 2.221118   9  NA          \nNA\n         0\n#\n 25 0.3430066 2      b 2.219816  10  NA          \nNA\n         0\n#\n              ei error.model train.time prop.type propose.time\n#\n 16 -0.001088685        \nNA\n      0.244 infill_ei       25.516\n#\n 17 -0.004076832        \nNA\n      0.232 infill_ei       23.755\n#\n 18 -0.001207489        \nNA\n      0.234 infill_ei       24.257\n#\n 19 -0.002930745        \nNA\n      0.237 infill_ei       24.340\n#\n 20 -0.003336684        \nNA\n      0.238 infill_ei       24.252\n#\n 21 -0.002996394        \nNA\n      0.239 infill_ei       24.427\n#\n 22 -0.002522459        \nNA\n      0.240 infill_ei       24.413\n#\n 23 -0.001651454        \nNA\n      0.240 infill_ei       24.611\n#\n 24 -0.003694348        \nNA\n      0.241 infill_ei       24.480\n#\n 25 -0.004889740        \nNA\n      0.243 infill_ei       24.461\n\n\n\n\nFinally, if a learner, which does not support the \nse\n prediction type, should be applied for the optimization with the \nei\n infill criterion, it is possible to create a bagging model. For details on how to do it take a look at the \nbagging section\n in the \nmlr\n tutorial.", 
            "title": "In Depth Introduction"
        }, 
        {
            "location": "/in_depth_introduction/index.html#introduction", 
            "text": "The first step of MBO requires an initial set of points which are then evaluated by the black box function.  The procedure of MBO is a loop of the following steps:   A user defined surrogate model is fitted on the evaluated points  A new point is proposed by an infill criterion   Its performance is evaluated   We will use  mlrMBO  to maximize a one dimensional mixed cosine function function, which you may already know from the  quickstart  example.  library(mlrMBO)\n\nobj.fun = makeCosineMixtureFunction(1)\n\ndes = generateDesign(n = 5L, par.set = getParamSet(obj.fun))\n\nlearner = makeLearner( regr.km , predict.type =  se , covtype =  matern3_2 , control = list(trace = FALSE))\n\ncontrol = makeMBOControl()\ncontrol = setMBOControlTermination(control, iters = 5)\ncontrol = setMBOControlInfill(control, crit =  ei )\n\nresult = mbo(obj.fun, learner = learner, control = control, show.info = TRUE)\n#  Computing y column(s) for design. Not provided.\n#  [mbo] 0: x=0.991 : y = -0.882 : 0.0 secs : initdesign\n#  [mbo] 0: x=-0.318 : y = -0.128 : 0.0 secs : initdesign\n#  [mbo] 0: x=0.0279 : y = -0.0913 : 0.0 secs : initdesign\n#  [mbo] 0: x=-0.567 : y = -0.235 : 0.0 secs : initdesign\n#  [mbo] 1: x=-0.106 : y = -0.00128 : 0.0 secs : infill_ei\n#  [mbo] 2: x=-1 : y = -0.9 : 0.0 secs : infill_ei\n#  [mbo] 3: x=-0.157 : y = 0.0537 : 0.0 secs : infill_ei\n#  [mbo] 4: x=-0.19 : y = 0.0627 : 0.0 secs : infill_ei\n#  [mbo] 5: x=0.329 : y = -0.151 : 0.0 secs : infill_ei  From this example we can easily see some  mlrMBO  essentials, like parameters, learners and the control object.  The following steps are needed to start a surrogate-based optimization with our package. \nEach step ends with an R object, which is then passed to  mbo() , i.e., to the working horse of  mlrMBO .   define the objective function and its parameters by using the package  smoof \n(2. generate an initial design)\n(3. define a learner, i.e., the surrogate model)  set up a MBO control object  finally start the optimization   Step 2 and 3 are optional as  mbo()  will use default settings if no value is supplied.\nThis web page will provide you with an in-depth introduction on how to set the  mbo()  parameters for different kind of optimizations.", 
            "title": "Introduction"
        }, 
        {
            "location": "/in_depth_introduction/index.html#objective-function", 
            "text": "The first argument of  mbo()  is the the objective function created with  makeSingleObjectiveFunction  (or  makeMultiObjectiveFunction ) from the package  smoof .   Throughout this tutorial we demonstrate the optimization of two simple functions:     objfun1 : The 5 dimensional  ackley function , which depends on 5 numeric parameters.  objfun1  should be minimized.    objfun2 : A self-constructed sine und cosine combination, with two numeric and 1 categorical parameters.  objfun2  should be maximized.     The 5 dimensional  ackley function  is generated by the appropriate function of the  smoof  package.  objfun1 = makeAckleyFunction(5)\nobjfun1(c(1.8, 2.2, -4, 4, -5))\n#  [1] 10.9365  The self-constructed function can be built with  makeSingleObjetiveFunction . The  par.set  argument has to be a  ParamSet  object from the  ParamHelpers  package, which provides information about the parameters of the objective function and their constraints for optimization.\nWe define  j  in the interval [0,1] and  k  as an integer in {1, 2}. The Parameter  method  is categorical and can be either  \"a\"  or  \"b\" .\nIn this case we want to maximize the function, so we have to set  minimize = FALSE .\nAs the parameters are different types (e.g. numeric and categorical), the function expects a list instead of a vector as its argument \n(This is specified by  has.simple.signature = FALSE ).\nFor further information about he  smoof  package we refer to the  github page .  foo = function(x) {\n  j = x[[1]]\n  k = x[[2]]\n  method = x[[3]]\n  perf = ifelse(method ==  a , k * sin(j) + cos(j),\n               sin(j) + k * cos(j))\n  return(perf)\n}\n\nobjfun2 = makeSingleObjectiveFunction(\n  name =  example ,\n  fn = foo,\n  par.set = makeParamSet(\n    makeNumericParam( j , lower = 0,upper = 1),\n    makeIntegerParam( k , lower = 1L, upper = 2L),\n    makeDiscreteParam( method , values = c( a ,  b ))\n  ),\n  has.simple.signature = FALSE,\n  minimize = FALSE\n)\n\nobjfun2(list(j = 0.5, k = 1L, method =  a ))\n#  [1] 1.357008", 
            "title": "Objective Function"
        }, 
        {
            "location": "/in_depth_introduction/index.html#initial-design", 
            "text": "The second argument of the  mbo()  function -  design  - is the initial design with default setting  NULL .  An easy (and recommended) way to create an initial design is to use the  generateDesign  function from the  ParamHelpers  package. If the default settings are used (i.e.  design = NULL ) a Random Latin Hypercube  lhs::randomLHS  design is used with 4 times the number of objective function's parameters. Other possibilities to generate designs are for example  generateGridDesign  and  generateRandomDesign .   Note:  If special designs are desired (e.g., orthogonal designs), its interface has to be the same as the interface of the  generateDesign  objects.   For  objfun1  and  objfun2  we create a slightly larger number of initial points than the default suggests. For  objfun1  we use Random Latin Hypercube sampling and for  objfun2  the Maximin Latin Hypercube sampling. The parameters of the sampling design have to be specified in a list and supplied via  fun.args .  init.points1 = 5 * sum(ParamHelpers::getParamLengths(getParamSet(objfun1)))\n\nset.seed(1)\ndesign1 = generateDesign(n = init.points1, par.set = getParamSet(objfun1), fun = randomLHS)\n\ninit.points2 = 5 * sum(ParamHelpers::getParamLengths(getParamSet(objfun2)))\ndesign2 = generateDesign(n = init.points2, par.set = getParamSet(objfun2), fun.args = list(k = 3, dup = 4), fun = maximinLHS)", 
            "title": "Initial Design"
        }, 
        {
            "location": "/in_depth_introduction/index.html#surrogate-model", 
            "text": "The attribute  learner  of the  mbo()  function allows us to choose an appropriate surrogate model for the parameter optimization. Different learners can easily created using the  makeLearner  function from the  mlr  package.\nA list of implemented learners can be seen using the  listlearners()  function or on the  mlr wiki .  The choice of the surrogate model depends on the parameter set of the objective function.\nWhile kriging models (gaussian processes) are advisable if all parameters are numeric, they cannot be used if the objective function contains categorical parameters. If at least one parameter is categorical, random forest models might be a good choice as surrogate models. The default kriging model is from the  DiceKriging  package and uses the  matern5_2 covariance kernel.\nIn our example we consider these two surrogate models: kriging  for optimizing of  objfun1  and  random forest  for  objfun2 .  surr.km = makeLearner( regr.km , predict.type =  se , covtype =  matern3_2 , control = list(trace = FALSE))\nsurr.rf = makeLearner( regr.randomForest )  Further modification of the learner (e.g., in order to get standard error prediction for points) will be discussed und illustrated in the section  Experiments and Output .", 
            "title": "Surrogate Model"
        }, 
        {
            "location": "/in_depth_introduction/index.html#mbocontrol", 
            "text": "The  MBOControl  object controls the fitting process and is created with  makeMBOControl . General control arguments can be set when creating it (e.g. the number of objectives ( n.objectives ), the number of points to propose in each iteration ( propose.points ), how the final point is proposed ( final.method ) etc.).\nTo further adapt the optimization, additional control functions are used to define or change settings of the object:", 
            "title": "MBOControl"
        }, 
        {
            "location": "/in_depth_introduction/index.html#mbocontrolinfill", 
            "text": "With  setMBOControlInfill  a  MBOControl  object can be extended with infill criteria and infill optimizer options.", 
            "title": "MBOControlInfill"
        }, 
        {
            "location": "/in_depth_introduction/index.html#argument-crit", 
            "text": "One of the most important questions is to define how the next design points in the sequential loop are chosen. \n5 different possibilities can be set via the  crit  argument in  setMBOControlInfill :   mean : mean response of the surrogate model  ei : expected improvement of the surrogate model  aei : augmented expected improvement, which is especially useful for noisy functions  eqi : expected quantile improvement  cb : confidence bound, which is the additive combination of mean response and mean standard error estimation of the surrogate model (response - lambda * standard.error)   The parameters of the different criteria are set via further arguments (e.g.  crit.cb.lambds  for the lambda parameter if  crit = cb )", 
            "title": "Argument crit"
        }, 
        {
            "location": "/in_depth_introduction/index.html#argument-opt", 
            "text": "The argument  opt  sets how the next point to evaluate should be proposed given an infill criterion. \nThe possibilities are:   focussearch : A Latin Hypercube design of size  opt.focussearch.points  (default 10000) is sampled in the parameter space (by  randomLHS ) and the design point with the best prediction of the infill criterion is determined. Then, the parameter space is shrunk around the best design point. This process is repeated  opt.focussearch.maxit  (default 5) times and the best observed point is passed back.  cmaes : The optimal point is found with a covariance matrix adapting evolutionary strategy from the  cmaes  package. If the strategy fails, a random point is generated and a warning is given. Further control arguments can be provided in  opt.cmaes.control  as a list.   ea : Use an evolutionary multiobjective optimization algorithm from the package  emoa  to determine the best point. The population size mu can be set by   opt.ea.mu  (default value is 10). (mu+1) means that in each population only one child is generated using crossover und mutation operators. The parameters  eta  and  p  of the latter two operators can be adjusted via the attributes  opt.ea.sbx.eta ,  opt.ea.sbx.p , opt.ea.pm.eta  and  opt.ea.pm.p . The default number of EA iterations is 500 and can be changed by  opt.ea.maxit  attribute.  nsga2 : Use the non-dominated sorting genetic algorithm from the package  nsga2R  to determine the best point. This algorithm should be used for  multi object optimization .   As all four infill optimization strategies do not guarantee to find the global optimum, users can set the number of restarts by the  opt.restarts  argument (default value is 1).\nAfter conducting the desired number of restarts the point with the best infill criterion value is passed back to the MBO loop.  Note:  Only the  focussearch  optimizer is suitable for for categorical parameters in the parameter set.", 
            "title": "Argument opt"
        }, 
        {
            "location": "/in_depth_introduction/index.html#setmbocontroltermination", 
            "text": "With this control function different criteria to stop the fitting process can be specified. You can set multiple different criteria and the first one that is met will terminate the optimization process.\nYou can set:    iters : The maximum number of iterations  time.budget : A maximum running time in seconds  target.fun.value : A treshold for function evaluation (stop if a evaluation is better than a given value)  max.evals : The maximum number of function evaluations   Note:  You can also easily create your own stopping condition(s).", 
            "title": "setMBOControlTermination"
        }, 
        {
            "location": "/in_depth_introduction/index.html#setmbocontrolmultipoint", 
            "text": "This extends a MBO control object with options for multipoint proposal. Multipoint proposal means, that multiple points are proposed and evaluated, which is especially useful for parallel batch evaluation. For a detailed introduction, check the  multi-point tutorial .", 
            "title": "setMBOControlMultiPoint"
        }, 
        {
            "location": "/in_depth_introduction/index.html#argument-method", 
            "text": "Define the method used for multipoint proposals, currently 3 different methods are supported:   cb : Proposes multiple points by optimizing the confidence bound criterion  propose.points  times with different lambda values. Generally this works the same way as for the single point case, i.e. specify  infill.opt . The lambdas are drawn from an exp(1)-distribution.  multicrit : Use a evolutionary multicriteria optimization. This is a (mu+1) type evolutionary algorithm and runs for  multicrit.maxit  generations. The population size is set to  propose.points .  cl : Proposes points by the constant liar strategy, which only makes sense if the confidence bound criterion is used as an infill criterion. In the first step the surrugate model is fitted based on the real data and the best point is calculated accordingly. Then, the function value of the best point is simply guessed by the worst seen function evaluation. This \"lie\"\" is used to update the model in order to propose subsequent point. The procedure is applied until the number of points has reached  propose.points .", 
            "title": "Argument: method"
        }, 
        {
            "location": "/in_depth_introduction/index.html#setmbocontrolmultifid", 
            "text": "Add multi-fidelity options to the  MBOControl  control object. This is useful when certain parameters increase the performance as well as the calculation cost. The idea is to combine the optimization of fast fitting low-fidelity models and more accurate but expensive high-fidelity models. The parameter on which the fidelity depends on is specified as  param  and the order of the values to train the learner with in  lvls . The costs for the different levels can be specified directly or estimated by a model based on the execution time of the currently evaluated points.", 
            "title": "setMBOControlMultiFid"
        }, 
        {
            "location": "/in_depth_introduction/index.html#setmbocontrolmulticrit", 
            "text": "This adds multi-criteria optimization specific options to the control object. For details see the tutorial page on  multi-criteria optimization .  note:  The list of all attributes is provided in the software documentation.", 
            "title": "setMBOControlMultiCrit"
        }, 
        {
            "location": "/in_depth_introduction/index.html#experiments-and-output", 
            "text": "Now we will apply the mbo() function to optimize the two objective functions.  control1 = makeMBOControl()\ncontrol1 = setMBOControlInfill(\n  control = control1,\n  crit =  ei ,\n  opt =  cmaes \n)\ncontrol1 = setMBOControlTermination(\n  control = control1,\n  iters = 10\n)\n\ncontrol2 = makeMBOControl()\ncontrol2 = setMBOControlInfill(\n  control = control2,\n  crit =  mean ,\n  opt =  focussearch \n)\ncontrol2 = setMBOControlTermination(\n  control = control2,\n  iters = 10\n)", 
            "title": "Experiments and Output"
        }, 
        {
            "location": "/in_depth_introduction/index.html#optimization-of-objfun1", 
            "text": "mbo(objfun1, design = design1, learner = surr.km, control = control1, show.info = FALSE)\n#  Loading required package: cmaes\n#  Recommended parameters:\n#  x=-0.231,-7.24,2.99,9.75,0.772\n#  Objective: y = 14.890\n#  \n#  Optimization path\n#  25 + 10 entries in total, displaying last 10 (or less):\n#             x1         x2         x3        x4          x5        y dob eol\n#  26 -4.1344701 -11.280723 -6.2682848 10.614163  1.51687717 17.69731   1  NA\n#  27 -4.2113035 -12.460723  5.4296361 26.550440  2.26434473 20.79083   2  NA\n#  28 -2.8101134 -11.905387 -6.2708025 11.198311  1.48710794 17.56453   3  NA\n#  29 -2.3077237 -11.283067 -0.7137972 10.068634  0.67382086 16.70700   4  NA\n#  30 -1.6128847 -11.157700  0.4245640  9.321973 -1.46651174 16.74696   5  NA\n#  31 -1.9767048  -7.994966  0.5428918  9.879410  1.29925113 15.09592   6  NA\n#  32 -2.1739016  -7.507374  3.5950233 10.343125  7.13426623 16.81716   7  NA\n#  33  1.0177723  -7.320137  3.8522845  9.734331 -0.09586551 14.90152   8  NA\n#  34 -0.2307275  -7.238255  2.9901658  9.752429  0.77217362 14.89039   9  NA\n#  35  0.8305870  -7.828567  0.9769239 10.212582  0.66503963 15.03985  10  NA\n#     error.message exec.time          ei error.model train.time prop.type\n#  26           NA          0 -0.13578587         NA       0.056 infill_ei\n#  27           NA          0 -0.04112985         NA       0.068 infill_ei\n#  28           NA          0 -0.04329315         NA       0.023 infill_ei\n#  29           NA          0 -0.04881911         NA       0.073 infill_ei\n#  30           NA          0 -0.07473238         NA       0.068 infill_ei\n#  31           NA          0 -0.04701723         NA       0.088 infill_ei\n#  32           NA          0 -0.07258889         NA       0.099 infill_ei\n#  33           NA          0 -0.11976001         NA       0.101 infill_ei\n#  34           NA          0 -0.13456980         NA       0.096 infill_ei\n#  35           NA          0 -0.09734031         NA       0.081 infill_ei\n#     propose.time\n#  26       39.615\n#  27        4.059\n#  28        4.247\n#  29       16.450\n#  30       39.955\n#  31       39.590\n#  32       15.670\n#  33       18.812\n#  34       39.722\n#  35       39.759  The default output of mbo contains the best found parameter set and the optimzation path. The  MBOResult  object contains additional information, most importantly:   x : The best point of the parameter space  y : The associated best value of the objective function  opt.path : The optimization path. See  ParamHelpers::OptPath  for further information.  models : Depending on  store.model.at  in the  MBOControl  object, this contains zero, one or multiple surrogate models (default is to save the model generated after the last iteration).  ...   We can also change some arguments of the  MBOControl  object and run  mbo()  again:  control1 = setMBOControlInfill(control1, crit =  cb )\ncontrol1 = setMBOControlTermination(control1, iters = 5L)\nmbo(objfun1, design = design1, learner = surr.km, control = control1, show.info = FALSE)\n#  Recommended parameters:\n#  x=0.978,-7.43,-13.1,10.7,-1.56\n#  Objective: y = 18.028\n#  \n#  Optimization path\n#  25 + 5 entries in total, displaying last 10 (or less):\n#              x1         x2         x3         x4          x5        y dob\n#  21 -18.4744127  21.313393  13.344632  28.213180  30.6994892 21.86065   0\n#  22 -24.4445957  -1.728539  22.571544 -29.712832 -10.6725366 21.80285   0\n#  23  21.6182247   8.797898 -27.943221  15.262464  -6.2057612 21.00895   0\n#  24 -16.7641412  -8.149115  17.872883 -31.430737  20.8669152 21.12661   0\n#  25  14.0628327 -23.906238  -4.501402 -19.860112 -22.4317746 21.10929   0\n#  26  -4.1044128 -12.606910  -5.703835  22.811550  -3.1341140 19.79305   1\n#  27  -4.3377912  -8.183227 -18.206775  -1.593834  17.8480240 19.97844   2\n#  28  -3.5921373 -17.464623  14.515179   2.615829 -21.7642485 21.05124   3\n#  29   0.9780682  -7.428006 -13.146121  10.701360  -1.5647973 18.02784   4\n#  30  17.7388794  -7.605400 -12.511124  10.833863   0.6870558 19.95576   5\n#     eol error.message exec.time       cb error.model train.time  prop.type\n#  21  NA           NA          0       NA         NA          NA initdesign\n#  22  NA           NA          0       NA         NA          NA initdesign\n#  23  NA           NA          0       NA         NA          NA initdesign\n#  24  NA           NA          0       NA         NA          NA initdesign\n#  25  NA           NA          0       NA         NA          NA initdesign\n#  26  NA           NA          0 19.57520         NA       0.104  infill_cb\n#  27  NA           NA          0 19.61595         NA       0.057  infill_cb\n#  28  NA           NA          0 19.58862         NA       0.053  infill_cb\n#  29  NA           NA          0 19.24408         NA       0.071  infill_cb\n#  30  NA           NA          0 17.91716         NA       0.066  infill_cb\n#     propose.time\n#  21           NA\n#  22           NA\n#  23           NA\n#  24           NA\n#  25           NA\n#  26       31.465\n#  27       29.303\n#  28       31.086\n#  29       29.351\n#  30       30.451", 
            "title": "Optimization of objfun1"
        }, 
        {
            "location": "/in_depth_introduction/index.html#optimization-of-objfun2", 
            "text": "Now let us use  mlrMBO  to optimize  objfun2 , which contains one categorical variable.\nAs we have already mentioned before, in case of factor variables only  focussearch  is suitable and kriging cannot be used as a surrogate model.\nIf we use  mean  as the infill criterion, any kind of model which can handle factors variables is possible (like regression trees, random forests, linear models and many others).  mbo2 = mbo(objfun2, design = design2, learner = surr.rf, control = control2, show.info = FALSE)  mbo2\n#  Recommended parameters:\n#  j=0.464; k=2; method=b\n#  Objective: y = 2.236\n#  \n#  Optimization path\n#  15 + 10 entries in total, displaying last 10 (or less):\n#             j k method        y dob eol error.message exec.time      mean\n#  16 0.4818527 2      b 2.235697   1  NA           NA          0 -2.024302\n#  17 0.4776386 2      b 2.235849   2  NA           NA          0 -2.077485\n#  18 0.4732615 2      b 2.235965   3  NA           NA          0 -2.103271\n#  19 0.4583627 2      b 2.236037   4  NA           NA          0 -2.148599\n#  20 0.4635522 2      b 2.236068   5  NA           NA          0 -2.140973\n#  21 0.4695794 2      b 2.236029   6  NA           NA          0 -2.169294\n#  22 0.4528926 2      b 2.235939   7  NA           NA          0 -2.167340\n#  23 0.4593087 2      b 2.236047   8  NA           NA          0 -2.174345\n#  24 0.4606476 2      b 2.236058   9  NA           NA          0 -2.178551\n#  25 0.4559890 2      b 2.236002  10  NA           NA          0 -2.178266\n#     error.model train.time   prop.type propose.time\n#  16         NA       0.012 infill_mean        0.655\n#  17         NA       0.007 infill_mean        0.651\n#  18         NA       0.007 infill_mean        0.656\n#  19         NA       0.007 infill_mean        0.560\n#  20         NA       0.007 infill_mean        0.686\n#  21         NA       0.010 infill_mean        0.587\n#  22         NA       0.007 infill_mean        0.711\n#  23         NA       0.007 infill_mean        0.674\n#  24         NA       0.008 infill_mean        0.590\n#  25         NA       0.007 infill_mean        0.711  If we want to use the expected improvement  ei  or (lower) confidence bound  cb , the  predict.type  attribute of the learner has be set to  se . A list of regression learners which support it can be viewed by:  listLearners(obj =  regr , properties =  se )  We modify the random forest to predict the standard error and optimize  objfun2  by the  ei  infill criterion.  learner_rf = makeLearner( regr.randomForest , predict.type =  se )\ncontrol2$infill.crit =  ei \nmbo(objfun2, design = design2, learner = learner_rf, control = control2, show.info = FALSE)\n#  Recommended parameters:\n#  j=0.466; k=2; method=b\n#  Objective: y = 2.236\n#  \n#  Optimization path\n#  15 + 10 entries in total, displaying last 10 (or less):\n#             j k method        y dob eol error.message exec.time\n#  16 0.4661886 2      b 2.236061   1  NA           NA          0\n#  17 0.4489786 2      b 2.235827   2  NA           NA          0\n#  18 0.4087637 2      b 2.232701   3  NA           NA          0\n#  19 0.4001213 2      b 2.231558   4  NA           NA          0\n#  20 0.3891106 2      b 2.229859   5  NA           NA          0\n#  21 0.3991105 2      b 2.231413   6  NA           NA          0\n#  22 0.3811265 2      b 2.228459   7  NA           NA          0\n#  23 0.3890530 2      b 2.229850   8  NA           NA          0\n#  24 0.3479477 2      b 2.221118   9  NA           NA          0\n#  25 0.3430066 2      b 2.219816  10  NA           NA          0\n#               ei error.model train.time prop.type propose.time\n#  16 -0.001088685         NA       0.244 infill_ei       25.516\n#  17 -0.004076832         NA       0.232 infill_ei       23.755\n#  18 -0.001207489         NA       0.234 infill_ei       24.257\n#  19 -0.002930745         NA       0.237 infill_ei       24.340\n#  20 -0.003336684         NA       0.238 infill_ei       24.252\n#  21 -0.002996394         NA       0.239 infill_ei       24.427\n#  22 -0.002522459         NA       0.240 infill_ei       24.413\n#  23 -0.001651454         NA       0.240 infill_ei       24.611\n#  24 -0.003694348         NA       0.241 infill_ei       24.480\n#  25 -0.004889740         NA       0.243 infill_ei       24.461  Finally, if a learner, which does not support the  se  prediction type, should be applied for the optimization with the  ei  infill criterion, it is possible to create a bagging model. For details on how to do it take a look at the  bagging section  in the  mlr  tutorial.", 
            "title": "Optimization of objfun2"
        }, 
        {
            "location": "/parallelization/index.html", 
            "text": "Work in progress", 
            "title": "Parallelization"
        }, 
        {
            "location": "/multi_point_proposal/index.html", 
            "text": "Work in progress!", 
            "title": "Multi point proposal"
        }, 
        {
            "location": "/multi_criteria_optimization/index.html", 
            "text": "Introduction\n\n\nFor multi-objective (multi-criteria) optimization , one need to understand the concept of Pareto front. For two candidate points, if point A could win point B by one criteria without deteriorating another, we say A weakly dominate B, which could define a partial order across all the feasible points. With this partial order, one could define an equivalent class and the best equivalent class we call it Pareto Front.\n\n\nThere are several state of art algorithms to approximate the Pareto Front and mlrMBO has most of them. The following example shows how to use mlrMBO to solve a benchmark multi-criteria optimization problem, ie. the ZDT1 function. \n\n\nA working example\n\n\nFirst we load necessary packages\n\n\n# load mlrMBO package containing the code for multi-criteria optimization\nsuppressMessages(library(mlrMBO, quietly = TRUE, warn.conflicts = FALSE))\n# load package \nmco\n which contains our zdt1 example function, a multi-objective function \nsuppressMessages(library(mco,quietly = TRUE, warn.conflicts = FALSE))\n\n\n\n\nIn this simple example, we use the zdt1 function and to simplify, we use only two dimensional. We also get the parameter set to be optimized. \n\n\n#################################################################################\n# define the multi-objective function to be optimized and get the parameter set \nobj = makeZDT1Function(2L) # obj will be a S3 class that inherits from \nfunction\n and \nsmoof_function\n, the type of obj itself will be \nsmoof_multi_objective_function\n \nsmoof_function\n \npar.set = getParamSet(obj)\n\n# have a look the lower and upper bound for the parameter to be tuned\npar.set$pars$x$lower \n#\n [1] 0 0\npar.set$pars$x$upper\n#\n [1] 1 1\n\n\n\n\nLike other model based optimization problem, one need to define an initial design grid that is distributed in the parameter space. Since we are going to use Kriging model(Gaussian Process) for MBMO(Model Based Multi Objective), a natural choice would be the Latin Hyper hypercube sampling.  \n\n\n#################################################################################\n# generate initial design points on the grid\ninit.points.num = 5 * sum(ParamHelpers::getParamLengths(getParamSet(obj))) # 5 times the total dimension \ndesign1 = generateDesign(n = init.points.num, par.set = getParamSet(obj), fun=maximinLHS, fun.args = list(k=2))\n\n\n\n\nThe next step is the most critical step, which is different from other Model Based Optimization technique. As other MBO methods, we have to first define a surrogate model, which we use Kriging Model (\"regr.km\") here. Then we define the control object, which could be parallelized. Here we parallely propose 4L points each time.\n\n\n##################################################################################\n# define a regression surrogate, here we select kriging model\nlearner = makeLearner(\nregr.km\n, predict.type = \nse\n, config = list(show.learner.output = FALSE), control = list(trace = FALSE))\n#\nctrl = suppressMessages(makeMBOControl( n.objectives = 2L, propose.points = 4L))# set up multipoint batch proposal = 4point bachtes\nctrl = setMBOControlTermination(ctrl, iters = 3L) # recommend much more iterations, but for display we only set 3 here.\n# set infill criteria, use dib-eps = eps-EGO and set up infill optimizer, dib=direct indicated based \nctrl = setMBOControlInfill(ctrl, crit = \ndib\n, opt.focussearch.points = 1000L, opt.focussearch.maxit = 3L, opt.restarts = 3L)\nctrl = setMBOControlMultiCrit(ctrl, method = \ndib\n, dib.indicator = \neps\n)\n\n\n\n\nAfter defining all necessary objects. We could run the optimizer and collect results.\n\n\n##################################################################################\n# run optimizer and collect results\nres = mbo(obj, design =design1, learner = learner, control = ctrl, show.info = FALSE)\n\n\n\n\nThen we could have a look at  the results.\n\n\n# print all the names for the res object\nprint(names(res))\n#\n [1] \npareto.front\n \npareto.set\n   \npareto.inds\n  \nopt.path\n    \n#\n [5] \nfinal.state\n  \nmodels\n       \ncontrol\n\n# print out the pareto front \nprint(res$pareto.front) \n#\n           y_1         y_2\n#\n 11 0.99683561 0.002693454\n#\n 12 0.28749301 0.466422148\n#\n 13 0.68275299 0.176425702\n#\n 14 0.01862481 0.865935267\n#\n 15 0.49153716 0.300156355\n#\n 16 0.11132573 0.671276923\n#\n 17 0.86227468 0.075031240\n#\n 18 0.18259950 0.575551612\n#\n 19 0.39534151 0.373062304\n#\n 20 0.60137988 0.225714924\n#\n 21 0.77955915 0.117629168\n#\n 22 0.23606723 0.523992893\n# print all evals along the optimization path\nprint(as.data.frame(res$opt.path))\n#\n            x1           x2        y_1         y_2 dob eol error.message\n#\n 1  0.47506487 0.6482105619 0.47506487 5.032078350   0  NA          \nNA\n\n#\n 2  0.16018794 0.4921752617 0.16018794 4.496971964   0  NA          \nNA\n\n#\n 3  0.77277842 0.9875772405 0.77277842 7.123889856   0  NA          \nNA\n\n#\n 4  0.95226667 0.2541159349 0.95226667 1.517822718   0  NA          \nNA\n\n#\n 5  0.23983315 0.3835477924 0.23983315 3.418624544   0  NA          \nNA\n\n#\n 6  0.61111926 0.8395176084 0.61111926 6.269061066   0  NA          \nNA\n\n#\n 7  0.59332092 0.1959123460 0.59332092 1.482792836   0  NA          \nNA\n\n#\n 8  0.31862004 0.7966711937 0.31862004 6.556616219   0  NA          \nNA\n\n#\n 9  0.06787471 0.0373930678 0.06787471 1.035344811   0  NA          \nNA\n\n#\n 10 0.86559875 0.5932073169 0.86559875 3.996449507   0  NA          \nNA\n\n#\n 11 0.99683561 0.0002461426 0.99683561 0.002693454   1  NA          \nNA\n\n#\n 12 0.28749301 0.0003954721 0.28749301 0.466422148   1  NA          \nNA\n\n#\n 13 0.68275299 0.0005135057 0.68275299 0.176425702   1  NA          \nNA\n\n#\n 14 0.01862481 0.0002871385 0.01862481 0.865935267   1  NA          \nNA\n\n#\n 15 0.49153716 0.0002143929 0.49153716 0.300156355   2  NA          \nNA\n\n#\n 16 0.11132573 0.0006575370 0.11132573 0.671276923   2  NA          \nNA\n\n#\n 17 0.86227468 0.0007494661 0.86227468 0.075031240   2  NA          \nNA\n\n#\n 18 0.18259950 0.0004051855 0.18259950 0.575551612   2  NA          \nNA\n\n#\n 19 0.39534151 0.0002955371 0.39534151 0.373062304   3  NA          \nNA\n\n#\n 20 0.60137988 0.0002180312 0.60137988 0.225714924   3  NA          \nNA\n\n#\n 21 0.77955915 0.0001105130 0.77955915 0.117629168   3  NA          \nNA\n\n#\n 22 0.23606723 0.0014456652 0.23606723 0.523992893   3  NA          \nNA\n\n#\n    exec.time         dib error.model train.time  prop.type propose.time\n#\n 1      0.000          NA        \nNA\n         NA initdesign           NA\n#\n 2      0.000          NA        \nNA\n         NA initdesign           NA\n#\n 3      0.000          NA        \nNA\n         NA initdesign           NA\n#\n 4      0.001          NA        \nNA\n         NA initdesign           NA\n#\n 5      0.000          NA        \nNA\n         NA initdesign           NA\n#\n 6      0.000          NA        \nNA\n         NA initdesign           NA\n#\n 7      0.000          NA        \nNA\n         NA initdesign           NA\n#\n 8      0.000          NA        \nNA\n         NA initdesign           NA\n#\n 9      0.000          NA        \nNA\n         NA initdesign           NA\n#\n 10     0.000          NA        \nNA\n         NA initdesign           NA\n#\n 11     0.000 -1.22602674        \nNA\n      0.050 infill_dib        0.201\n#\n 12     0.000 -0.68549410        \nNA\n         NA infill_dib        0.203\n#\n 13     0.000 -0.29240771        \nNA\n         NA infill_dib        0.203\n#\n 14     0.000 -0.23338336        \nNA\n         NA infill_dib        0.206\n#\n 15     0.000 -0.19486620        \nNA\n      0.044 infill_dib        0.221\n#\n 16     0.000 -0.17840975        \nNA\n         NA infill_dib        0.235\n#\n 17     0.000 -0.13329003        \nNA\n         NA infill_dib        0.224\n#\n 18     0.000 -0.10684702        \nNA\n         NA infill_dib        0.226\n#\n 19     0.000 -0.09676551        \nNA\n      0.045 infill_dib        0.250\n#\n 20     0.000 -0.08029924        \nNA\n         NA infill_dib        0.253\n#\n 21     0.000 -0.06500851        \nNA\n         NA infill_dib        0.308\n#\n 22     0.000 -0.05150947        \nNA\n         NA infill_dib        0.252", 
            "title": "Multi-criteria optimization"
        }, 
        {
            "location": "/multi_criteria_optimization/index.html#introduction", 
            "text": "For multi-objective (multi-criteria) optimization , one need to understand the concept of Pareto front. For two candidate points, if point A could win point B by one criteria without deteriorating another, we say A weakly dominate B, which could define a partial order across all the feasible points. With this partial order, one could define an equivalent class and the best equivalent class we call it Pareto Front.  There are several state of art algorithms to approximate the Pareto Front and mlrMBO has most of them. The following example shows how to use mlrMBO to solve a benchmark multi-criteria optimization problem, ie. the ZDT1 function.", 
            "title": "Introduction"
        }, 
        {
            "location": "/multi_criteria_optimization/index.html#a-working-example", 
            "text": "First we load necessary packages  # load mlrMBO package containing the code for multi-criteria optimization\nsuppressMessages(library(mlrMBO, quietly = TRUE, warn.conflicts = FALSE))\n# load package  mco  which contains our zdt1 example function, a multi-objective function \nsuppressMessages(library(mco,quietly = TRUE, warn.conflicts = FALSE))  In this simple example, we use the zdt1 function and to simplify, we use only two dimensional. We also get the parameter set to be optimized.   #################################################################################\n# define the multi-objective function to be optimized and get the parameter set \nobj = makeZDT1Function(2L) # obj will be a S3 class that inherits from  function  and  smoof_function , the type of obj itself will be  smoof_multi_objective_function   smoof_function  \npar.set = getParamSet(obj)\n\n# have a look the lower and upper bound for the parameter to be tuned\npar.set$pars$x$lower \n#  [1] 0 0\npar.set$pars$x$upper\n#  [1] 1 1  Like other model based optimization problem, one need to define an initial design grid that is distributed in the parameter space. Since we are going to use Kriging model(Gaussian Process) for MBMO(Model Based Multi Objective), a natural choice would be the Latin Hyper hypercube sampling.    #################################################################################\n# generate initial design points on the grid\ninit.points.num = 5 * sum(ParamHelpers::getParamLengths(getParamSet(obj))) # 5 times the total dimension \ndesign1 = generateDesign(n = init.points.num, par.set = getParamSet(obj), fun=maximinLHS, fun.args = list(k=2))  The next step is the most critical step, which is different from other Model Based Optimization technique. As other MBO methods, we have to first define a surrogate model, which we use Kriging Model (\"regr.km\") here. Then we define the control object, which could be parallelized. Here we parallely propose 4L points each time.  ##################################################################################\n# define a regression surrogate, here we select kriging model\nlearner = makeLearner( regr.km , predict.type =  se , config = list(show.learner.output = FALSE), control = list(trace = FALSE))\n#\nctrl = suppressMessages(makeMBOControl( n.objectives = 2L, propose.points = 4L))# set up multipoint batch proposal = 4point bachtes\nctrl = setMBOControlTermination(ctrl, iters = 3L) # recommend much more iterations, but for display we only set 3 here.\n# set infill criteria, use dib-eps = eps-EGO and set up infill optimizer, dib=direct indicated based \nctrl = setMBOControlInfill(ctrl, crit =  dib , opt.focussearch.points = 1000L, opt.focussearch.maxit = 3L, opt.restarts = 3L)\nctrl = setMBOControlMultiCrit(ctrl, method =  dib , dib.indicator =  eps )  After defining all necessary objects. We could run the optimizer and collect results.  ##################################################################################\n# run optimizer and collect results\nres = mbo(obj, design =design1, learner = learner, control = ctrl, show.info = FALSE)  Then we could have a look at  the results.  # print all the names for the res object\nprint(names(res))\n#  [1]  pareto.front   pareto.set     pareto.inds    opt.path     \n#  [5]  final.state    models         control \n# print out the pareto front \nprint(res$pareto.front) \n#            y_1         y_2\n#  11 0.99683561 0.002693454\n#  12 0.28749301 0.466422148\n#  13 0.68275299 0.176425702\n#  14 0.01862481 0.865935267\n#  15 0.49153716 0.300156355\n#  16 0.11132573 0.671276923\n#  17 0.86227468 0.075031240\n#  18 0.18259950 0.575551612\n#  19 0.39534151 0.373062304\n#  20 0.60137988 0.225714924\n#  21 0.77955915 0.117629168\n#  22 0.23606723 0.523992893\n# print all evals along the optimization path\nprint(as.data.frame(res$opt.path))\n#             x1           x2        y_1         y_2 dob eol error.message\n#  1  0.47506487 0.6482105619 0.47506487 5.032078350   0  NA           NA \n#  2  0.16018794 0.4921752617 0.16018794 4.496971964   0  NA           NA \n#  3  0.77277842 0.9875772405 0.77277842 7.123889856   0  NA           NA \n#  4  0.95226667 0.2541159349 0.95226667 1.517822718   0  NA           NA \n#  5  0.23983315 0.3835477924 0.23983315 3.418624544   0  NA           NA \n#  6  0.61111926 0.8395176084 0.61111926 6.269061066   0  NA           NA \n#  7  0.59332092 0.1959123460 0.59332092 1.482792836   0  NA           NA \n#  8  0.31862004 0.7966711937 0.31862004 6.556616219   0  NA           NA \n#  9  0.06787471 0.0373930678 0.06787471 1.035344811   0  NA           NA \n#  10 0.86559875 0.5932073169 0.86559875 3.996449507   0  NA           NA \n#  11 0.99683561 0.0002461426 0.99683561 0.002693454   1  NA           NA \n#  12 0.28749301 0.0003954721 0.28749301 0.466422148   1  NA           NA \n#  13 0.68275299 0.0005135057 0.68275299 0.176425702   1  NA           NA \n#  14 0.01862481 0.0002871385 0.01862481 0.865935267   1  NA           NA \n#  15 0.49153716 0.0002143929 0.49153716 0.300156355   2  NA           NA \n#  16 0.11132573 0.0006575370 0.11132573 0.671276923   2  NA           NA \n#  17 0.86227468 0.0007494661 0.86227468 0.075031240   2  NA           NA \n#  18 0.18259950 0.0004051855 0.18259950 0.575551612   2  NA           NA \n#  19 0.39534151 0.0002955371 0.39534151 0.373062304   3  NA           NA \n#  20 0.60137988 0.0002180312 0.60137988 0.225714924   3  NA           NA \n#  21 0.77955915 0.0001105130 0.77955915 0.117629168   3  NA           NA \n#  22 0.23606723 0.0014456652 0.23606723 0.523992893   3  NA           NA \n#     exec.time         dib error.model train.time  prop.type propose.time\n#  1      0.000          NA         NA          NA initdesign           NA\n#  2      0.000          NA         NA          NA initdesign           NA\n#  3      0.000          NA         NA          NA initdesign           NA\n#  4      0.001          NA         NA          NA initdesign           NA\n#  5      0.000          NA         NA          NA initdesign           NA\n#  6      0.000          NA         NA          NA initdesign           NA\n#  7      0.000          NA         NA          NA initdesign           NA\n#  8      0.000          NA         NA          NA initdesign           NA\n#  9      0.000          NA         NA          NA initdesign           NA\n#  10     0.000          NA         NA          NA initdesign           NA\n#  11     0.000 -1.22602674         NA       0.050 infill_dib        0.201\n#  12     0.000 -0.68549410         NA          NA infill_dib        0.203\n#  13     0.000 -0.29240771         NA          NA infill_dib        0.203\n#  14     0.000 -0.23338336         NA          NA infill_dib        0.206\n#  15     0.000 -0.19486620         NA       0.044 infill_dib        0.221\n#  16     0.000 -0.17840975         NA          NA infill_dib        0.235\n#  17     0.000 -0.13329003         NA          NA infill_dib        0.224\n#  18     0.000 -0.10684702         NA          NA infill_dib        0.226\n#  19     0.000 -0.09676551         NA       0.045 infill_dib        0.250\n#  20     0.000 -0.08029924         NA          NA infill_dib        0.253\n#  21     0.000 -0.06500851         NA          NA infill_dib        0.308\n#  22     0.000 -0.05150947         NA          NA infill_dib        0.252", 
            "title": "A working example"
        }
    ]
}